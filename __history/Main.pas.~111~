unit Main;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Menus, Vcl.StdCtrls, Vcl.ComCtrls,
  System.ImageList, Vcl.ImgList, About, System.Beacon, System.Bluetooth,
  System.Beacon.Components, Math, Vcl.Grids, Generics.Collections, System.IOUtils, Vcl.Imaging.jpeg, Vcl.Imaging.pngimage,
  Vcl.BaseImageCollection, Vcl.ImageCollection, Printers;

type
  TForm1 = class(TForm)
    MainMenu1: TMainMenu;
    Versand1: TMenuItem;
    Versand2: TMenuItem;
    Extras1: TMenuItem;
    EditAbsenderName: TEdit;
    Label1: TLabel;
    GroupBox1: TGroupBox;
    EditAbsenderAnrede: TEdit;
    GroupBox2: TGroupBox;
    EditAbsenderStraße: TEdit;
    EditAbsenderAdressInfo: TEdit;
    EditAbsenderPLZ: TEdit;
    EditAbsenderOrt: TEdit;
    EditEmpfaengerAdressInfo: TEdit;
    EditEmpfaengerAnrede: TEdit;
    EditEmpfaengerName: TEdit;
    EditEmpfaengerOrt: TEdit;
    EditEmpfaengerPLZ: TEdit;
    EditEmpfaengerStraße: TEdit;
    ComboBox1: TComboBox;
    ComboBox2: TComboBox;
    GroupBox3: TGroupBox;
    VersandeinesPaktesstarten1: TMenuItem;
    ImageList: TImageList;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    EditGewicht: TEdit;
    EditLaegne: TEdit;
    EditBreite: TEdit;
    Label8: TLabel;
    EditHoehe: TEdit;
    Label9: TLabel;
    CheckBoxExpress: TCheckBox;
    Label10: TLabel;
    Optionen1: TMenuItem;
    About: TMenuItem;
    N1: TMenuItem;
    PopupMenu1: TPopupMenu;
    est1: TMenuItem;
    ButtonAbsenderKontaktSetup: TButton;
    Button2: TButton;
    StartBTN: TButton;
    BalloonHint1: TBalloonHint;
    ListView1: TListView;
    Label11: TLabel;
    Label12: TLabel;
    ButtonPrint: TButton;
    PrintDialog1: TPrintDialog;
    procedure M_CheckForPossible();
    procedure M_MakeItAllDisabledObject();
    procedure M_MakeBriefEnabledObject();
    procedure AboutClick(Sender: TObject);
    procedure ButtonAbsenderKontaktSetupClick(Sender: TObject);
    procedure EditGewichtKeyPress(Sender: TObject; var Key: Char);
    procedure StartBTNClick(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure ButtonPrintClick(Sender: TObject);
    procedure PrintPackageSlip(
  SenderName, SenderAddress, SenderZipCode, SenderCity,
  RecipientName, RecipientAddress, RecipientZipCode, RecipientCity,
  TrackingNumber, DeliveryService: string
);
  private
    { Private-Deklarationen }
  public
    { Public-Deklarationen }
    procedure ZeigePassendeAngeboteMitLogosInListView(L, B, H, Gewicht: Double; Express, Einschreiben: Boolean);
  end;

var
  Form1: TForm1;
  CnGoForward: boolean;

implementation

{$R *.dfm}

uses SetupContact, Worker ;

procedure TForm1.PrintPackageSlip(
  SenderName, SenderAddress, SenderZipCode, SenderCity,
  RecipientName, RecipientAddress, RecipientZipCode, RecipientCity,
  TrackingNumber, DeliveryService: string
);
var
  Printer: TPrinter;
  PageWidth, PageHeight: Integer;
  MarginLeft, MarginTop: Integer;
  CurrentY: Integer;
begin
  // Zeige den Druckdialog an
  if PrintDialog1.Execute then
  begin
    Printer := Printer; // DIESE ZEILE ENTFERNEN
    try
      OutputDebugString('Vor Printer.BeginDoc'); // Debug-Ausgabe
      Printer.BeginDoc;
      OutputDebugString('Nach Printer.BeginDoc'); // Debug-Ausgabe
      PageWidth := Printer.PageWidth;
      PageHeight := Printer.PageHeight;
      MarginLeft := 50;
      MarginTop := 50;
      CurrentY := MarginTop;


      // Schriftarten definieren
      Printer.Canvas.Font.Name := 'Arial';
      Printer.Canvas.Font.Size := 12;

      // Rahmen zeichnen (vereinfacht)
      Printer.Canvas.Rectangle(MarginLeft, MarginTop, PageWidth - MarginLeft, PageHeight - MarginTop - 100); // Platz für den unteren Barcode

      // Überschrift
      Printer.Canvas.Font.Style := [fsBold];
      Printer.Canvas.TextOut(MarginLeft + 10, CurrentY + 10, DeliveryService + '-PAKETSCHEIN (Muster)');
      CurrentY := CurrentY + Printer.Canvas.TextHeight(DeliveryService +'PAKETSCHEIN (Muster)') + 10;
      Printer.Canvas.Font.Style := [];

      // Sendungs-ID
      Printer.Canvas.Font.Size := 16;
      Printer.Canvas.TextOut(MarginLeft + 10, CurrentY + 10, 'Sendungs-ID: ' + TrackingNumber);
      CurrentY := CurrentY + Printer.Canvas.TextHeight('Sendungs-ID: ' + TrackingNumber) + 20;
      Printer.Canvas.Font.Size := 12;

      // Absender
      Printer.Canvas.TextOut(MarginLeft + 10, CurrentY + 10, 'Absender:');
      CurrentY := CurrentY + Printer.Canvas.TextHeight('Absender:') + 5;
      Printer.Canvas.TextOut(MarginLeft + 20, CurrentY, SenderName);
      CurrentY := CurrentY + Printer.Canvas.TextHeight(SenderName);
      Printer.Canvas.TextOut(MarginLeft + 20, CurrentY, SenderAddress);
      CurrentY := CurrentY + Printer.Canvas.TextHeight(SenderAddress);
      Printer.Canvas.TextOut(MarginLeft + 20, CurrentY, SenderZipCode + ' ' + SenderCity);
      CurrentY := CurrentY + Printer.Canvas.TextHeight(SenderZipCode + ' ' + SenderCity) + 20;

      // Empfänger
      Printer.Canvas.TextOut(MarginLeft + (PageWidth - 2 * MarginLeft) div 2 + 10, MarginTop + 50, 'Empfänger:');
      Printer.Canvas.Font.Size := 12;
      Printer.Canvas.TextOut(MarginLeft + (PageWidth - 2 * MarginLeft) div 2 + 20, MarginTop + 50 + Printer.Canvas.TextHeight('Empfänger:') + 5, RecipientName);
      Printer.Canvas.TextOut(MarginLeft + (PageWidth - 2 * MarginLeft) div 2 + 20, MarginTop + 50 + Printer.Canvas.TextHeight('Empfänger:') + 5 + Printer.Canvas.TextHeight(RecipientName), RecipientAddress);
      Printer.Canvas.TextOut(MarginLeft + (PageWidth - 2 * MarginLeft) div 2 + 20, MarginTop + 50 + Printer.Canvas.TextHeight('Empfänger:') + 5 + Printer.Canvas.TextHeight(RecipientName) + Printer.Canvas.TextHeight(RecipientAddress), RecipientZipCode + ' ' + RecipientCity);

      // Hier müsstest du die Barcode-Generierung und das Zeichnen des Barcodes implementieren
      Printer.Canvas.Font.Size := 10;
      Printer.Canvas.TextOut(MarginLeft + 10, PageHeight - MarginTop - 80, 'Barcode hier (Sendungs-ID: ' + TrackingNumber + ')');

      Printer.EndDoc;
    finally
      // Printer wird hier nicht freigegeben, da PrintDialog1 ihn verwaltet.
      // Printer.Free;
    end;
  end;
end;


procedure TForm1.AboutClick(Sender: TObject);
begin
  AboutBox.Show();
end;

procedure TForm1.M_CheckForPossible;
begin
  if True then

end;

procedure TForm1.Button2Click(Sender: TObject);
begin
SetupContact.EMPorSEN:=2;
   SetupContact.Form2.Show();

end;

procedure TForm1.ButtonAbsenderKontaktSetupClick(Sender: TObject);
begin
SetupContact.EMPorSEN:=1;
  SetupContact.Form2.Show();

end;



procedure TForm1.ButtonPrintClick(Sender: TObject);
var
  TrackingNumber, DeliveryService: string;
  Item: TListItem;
  i:Integer;
  FoundCheckedItem: Boolean;
begin
    DeliveryService := ''; // Initialisiere DeliveryService
  FoundCheckedItem := False;
  for i := 0 to ListView1.Items.Count - 1 do
  begin
        Item := ListView1.Items[i];
        if Item.Checked then begin
        FoundCheckedItem := true;
          DeliveryService := Item.SubItems[0];
          Break;
        end;

  end;

  if not FoundCheckedItem then
  begin
    ShowMessage('Bitte wählen Sie einen Eintrag in der Liste aus!');
    Exit;
  end;

  Randomize;
  TrackingNumber := '12345678901234';

  //  Send Delivery.
  PrintPackageSlip(
    EditAbsenderName.Text, EditAbsenderStraße.Text, EditAbsenderPLZ.Text, EditAbsenderOrt.Text,
    EditEmpfaengerName.Text, EditEmpfaengerStraße.Text, EditEmpfaengerPLZ.Text, EditEmpfaengerOrt.Text,
    TrackingNumber, DeliveryService);


  ShowMessage('Paketschein mit Sendungs-ID: ' + TrackingNumber + ' wurde zum Druck gesendet.');
end;

procedure TForm1.EditGewichtKeyPress(Sender: TObject; var Key: Char);
begin
    if not (Key in ['0'..'9', ',', #8]) then // Allow digits, decimal separator, and backspace
  begin
    Key := #0; // Discard the key press
  end
  else if (Key = ',') and (Pos(Key, TEdit(Sender).Text) > 0) then
  begin
    Key := #0; // Discard if decimal separator is already present
  end;
end;




// Visual-Func
procedure TForm1.M_MakeItAllDisabledObject();
begin
  //
  EditLaegne.Enabled:=false;
  EditBreite.Enabled:=false;
  EditHoehe.Enabled:=false;
  EditGewicht.Enabled:=false;
  CheckBoxExpress.Enabled:=false;
end;

procedure TForm1.StartBTNClick(Sender: TObject);
var
  Laenge, Breite, Hoehe, Gewicht: Double;
  Express, Einschreiben: Boolean;
  LogoPfad: string;
begin
  // Überprüfe die Eingabefelder auf Gültigkeit (wie bisher)
  if EditGewicht.Text = EmptyStr then
  begin
    BalloonHint1.Title := 'Das Gewicht ist ungültig.';
    BalloonHint1.Description := 'Es müssen eine Zahl sein.';
    BalloonHint1.ShowHint(EditGewicht);
    Exit;
  end;
  if EditLaegne.Text = EmptyStr then
  begin
    BalloonHint1.Title := 'Die Länge ist ungültig.';
    BalloonHint1.Description := 'Es müssen eine Zahl sein.';
    BalloonHint1.ShowHint(EditLaegne);
    Exit;
  end;
  if EditBreite.Text = EmptyStr then
  begin
    BalloonHint1.Title := 'Die Breite ist ungültig.';
    BalloonHint1.Description := 'Es müssen eine Zahl sein.';
    BalloonHint1.ShowHint(EditBreite);
    Exit;
  end;
  if EditHoehe.Text = EmptyStr then
  begin
    BalloonHint1.Title := 'Die Höhe ist ungültig.';
    BalloonHint1.Description := 'Es müssen eine Zahl sein.';
    BalloonHint1.ShowHint(EditHoehe);
    Exit;
  end;

  if EditAbsenderAnrede.Text = EmptyStr then
  begin
    BalloonHint1.Title := 'Ungültig';
    BalloonHint1.Description := 'Sie müssen hier etwas eintragen';
    BalloonHint1.ShowHint(EditAbsenderAnrede);
    Exit;
  end;
  if EditAbsenderName.Text = EmptyStr then
  begin
    BalloonHint1.Title := 'Ungültig';
    BalloonHint1.Description := 'Sie müssen hier etwas eintragen';
    BalloonHint1.ShowHint(EditAbsenderName);
    Exit;
  end;
  if EditAbsenderStraße.Text = EmptyStr then
  begin
    BalloonHint1.Title := 'Ungültig';
    BalloonHint1.Description := 'Sie müssen hier etwas eintragen';
    BalloonHint1.ShowHint(EditAbsenderStraße);
    Exit;
  end;
  if EditAbsenderPLZ.Text = EmptyStr then
  begin
    BalloonHint1.Title := 'Ungültig';
    BalloonHint1.Description := 'Sie müssen hier etwas eintragen';
    BalloonHint1.ShowHint(EditAbsenderPLZ);
    Exit;
  end;
  if EditAbsenderOrt.Text = EmptyStr then
  begin
    BalloonHint1.Title := 'Ungültig';
    BalloonHint1.Description := 'Sie müssen hier etwas eintragen';
    BalloonHint1.ShowHint(EditAbsenderOrt);
    Exit;
  end;
  if EditEmpfaengerAnrede.Text = EmptyStr then
  begin
    BalloonHint1.Title := 'Ungültig';
    BalloonHint1.Description := 'Sie müssen hier etwas eintragen';
    BalloonHint1.ShowHint(EditEmpfaengerAnrede);
    Exit;
  end;
  if EditEmpfaengerName.Text = EmptyStr then
  begin
    BalloonHint1.Title := 'Ungültig';
    BalloonHint1.Description := 'Sie müssen hier etwas eintragen';
    BalloonHint1.ShowHint(EditEmpfaengerName);
    Exit;
  end;
  if EditEmpfaengerStraße.Text = EmptyStr then
  begin
    BalloonHint1.Title := 'Ungültig';
    BalloonHint1.Description := 'Sie müssen hier etwas eintragen';
    BalloonHint1.ShowHint(EditEmpfaengerStraße);
    Exit;
  end;
  if EditEmpfaengerPLZ.Text = EmptyStr then
  begin
    BalloonHint1.Title := 'Ungültig';
    BalloonHint1.Description := 'Sie müssen hier etwas eintragen';
    BalloonHint1.ShowHint(EditEmpfaengerPLZ);
    Exit;
  end;
  if EditEmpfaengerOrt.Text = EmptyStr then
  begin
    BalloonHint1.Title := 'Ungültig';
    BalloonHint1.Description := 'Sie müssen hier etwas eintragen';
    BalloonHint1.ShowHint(EditEmpfaengerOrt);
    Exit;
  end;

  // Konvertiere die Eingabewerte
  try
    Gewicht := StrToFloat(EditGewicht.Text);
    Laenge := StrToFloat(EditLaegne.Text);
    Breite := StrToFloat(EditBreite.Text);
    Hoehe := StrToFloat(EditHoehe.Text);
    Express := CheckBoxExpress.Checked;

    // Definiere den Pfad zu den Logos (passe dies an deinen tatsächlichen Pfad an)
    //LogoPfad := 'C:\Pfade\zu\deinen\Logos\'; // *** HIER DEINEN PFAD EINTRAGEN ***

    // Rufe die Prozedur auf, um die Angebote mit Logos anzuzeigen
    ZeigePassendeAngeboteMitLogosInListView(Laenge, Breite, Hoehe, Gewicht, Express, Einschreiben);

  except
    ShowMessage('Ungültige Eingabe bei den Maßen oder dem Gewicht.');
    Exit;
  end;
end;

procedure TForm1.M_MakeBriefEnabledObject();
begin
  //
  EditLaegne.Enabled:=true;
  EditBreite.Enabled:=true;
  EditHoehe.Enabled:=true;
  EditGewicht.Enabled:=true;
  CheckBoxExpress.Enabled:=false;
end;


procedure TForm1.ZeigePassendeAngeboteMitLogosInListView(L, B, H, Gewicht: Double; Express, Einschreiben: Boolean);
var
  MeinWorker: TWorker;
  PassendeAngebote: TList<TSendungInfo>;
  Angebot: TSendungInfo;
  ListItem: TListItem;
  ImageList: TImageList;
  LogoDateiPfad: string;
  I: Integer;
begin
  MeinWorker := TWorker.Create;
  Label12.Visible:=true;
  ListView1.Clear;
  ListView1.SmallImages := ImageList; // Weise die ImageList der ListView zu
  try
    PassendeAngebote := MeinWorker.FindePassendeSendungen(L, B, H, Gewicht, Express, Einschreiben);
    ListView1.Clear;
    ListView1.Columns.Clear;

    ListView1.Columns.Add.Caption := 'Logo'; // Spalte für das Logo
    ListView1.Columns.Add.Caption := 'Anbieter';
    ListView1.Columns.Add.Caption := 'Produkt';
    ListView1.Columns.Add.Caption := 'Preis ()';

    ListView1.ViewStyle := vsReport;

    for I := 0 to PassendeAngebote.Count - 1 do
    begin
      Angebot := PassendeAngebote[I];
      ListItem := ListView1.Items.Add;
      ListItem.Caption := ''; // Platzhalter für das Logo in der ersten Spalte
      ListItem.SubItems.Add(Angebot.Anbieter);
      ListItem.SubItems.Add(Angebot.ProduktName);
      ListItem.SubItems.Add(FormatFloat('0.00', Angebot.Preis));

      if Angebot.Anbieter = 'DHL' then
      begin
        ListItem.ImageIndex := 0;
      end
      else if Angebot.Anbieter = 'Hermes' then
      begin
        ListItem.ImageIndex := 1;
      end
      else if Angebot.Anbieter = 'GLS' then
      begin
        ListItem.ImageIndex := 2;
      end;


      
    end;

    //ListView1.;

  finally
    if ListView1.Items = nil then
      Label12.Visible:=true;

    PassendeAngebote.Free;
    MeinWorker.Free;
    ImageList.Free; // Nicht vergessen, die ImageList freizugeben!
  end;
end;


end.
